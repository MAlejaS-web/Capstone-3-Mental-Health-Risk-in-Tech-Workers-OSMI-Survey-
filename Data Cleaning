{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2099919b-8206-4565-8795-a45f0acb4149",
   "metadata": {},
   "source": [
    "# Setup & Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dcaecc51-0d92-4496-88e2-385c944d541a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "from pathlib import Path \n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87a8cddf-a795-4645-8bac-305139cc8d79",
   "metadata": {},
   "source": [
    "####  Loaded basic Python libraries (pandas, numpy, and matplotlib) and set a display option so I can see more columns while inspecting the data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dd9fa69-2e56-4103-8c98-f3467f4baf02",
   "metadata": {},
   "source": [
    "# Load the raw CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e1c9d8cb-e0a4-4718-9698-33162d5e13ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape (rows,cols): (1259, 27)\n",
      "\n",
      "Column names (first 20):\n",
      " ['Timestamp', 'Age', 'Gender', 'Country', 'state', 'self_employed', 'family_history', 'treatment', 'work_interfere', 'no_employees', 'remote_work', 'tech_company', 'benefits', 'care_options', 'wellness_program', 'seek_help', 'anonymity', 'leave', 'mental_health_consequence', 'phys_health_consequence']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Timestamp</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Country</th>\n",
       "      <th>state</th>\n",
       "      <th>self_employed</th>\n",
       "      <th>family_history</th>\n",
       "      <th>treatment</th>\n",
       "      <th>work_interfere</th>\n",
       "      <th>no_employees</th>\n",
       "      <th>...</th>\n",
       "      <th>leave</th>\n",
       "      <th>mental_health_consequence</th>\n",
       "      <th>phys_health_consequence</th>\n",
       "      <th>coworkers</th>\n",
       "      <th>supervisor</th>\n",
       "      <th>mental_health_interview</th>\n",
       "      <th>phys_health_interview</th>\n",
       "      <th>mental_vs_physical</th>\n",
       "      <th>obs_consequence</th>\n",
       "      <th>comments</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014-08-27 11:29:31</td>\n",
       "      <td>37</td>\n",
       "      <td>Female</td>\n",
       "      <td>United States</td>\n",
       "      <td>IL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Often</td>\n",
       "      <td>6-25</td>\n",
       "      <td>...</td>\n",
       "      <td>Somewhat easy</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Some of them</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014-08-27 11:29:37</td>\n",
       "      <td>44</td>\n",
       "      <td>M</td>\n",
       "      <td>United States</td>\n",
       "      <td>IN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Rarely</td>\n",
       "      <td>More than 1000</td>\n",
       "      <td>...</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014-08-27 11:29:44</td>\n",
       "      <td>32</td>\n",
       "      <td>Male</td>\n",
       "      <td>Canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Rarely</td>\n",
       "      <td>6-25</td>\n",
       "      <td>...</td>\n",
       "      <td>Somewhat difficult</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014-08-27 11:29:46</td>\n",
       "      <td>31</td>\n",
       "      <td>Male</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Often</td>\n",
       "      <td>26-100</td>\n",
       "      <td>...</td>\n",
       "      <td>Somewhat difficult</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Some of them</td>\n",
       "      <td>No</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014-08-27 11:30:22</td>\n",
       "      <td>31</td>\n",
       "      <td>Male</td>\n",
       "      <td>United States</td>\n",
       "      <td>TX</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Never</td>\n",
       "      <td>100-500</td>\n",
       "      <td>...</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Some of them</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2014-08-27 11:31:22</td>\n",
       "      <td>33</td>\n",
       "      <td>Male</td>\n",
       "      <td>United States</td>\n",
       "      <td>TN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Sometimes</td>\n",
       "      <td>6-25</td>\n",
       "      <td>...</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2014-08-27 11:31:50</td>\n",
       "      <td>35</td>\n",
       "      <td>Female</td>\n",
       "      <td>United States</td>\n",
       "      <td>MI</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sometimes</td>\n",
       "      <td>1-5</td>\n",
       "      <td>...</td>\n",
       "      <td>Somewhat difficult</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Some of them</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2014-08-27 11:32:05</td>\n",
       "      <td>39</td>\n",
       "      <td>M</td>\n",
       "      <td>Canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Never</td>\n",
       "      <td>1-5</td>\n",
       "      <td>...</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2014-08-27 11:32:39</td>\n",
       "      <td>42</td>\n",
       "      <td>Female</td>\n",
       "      <td>United States</td>\n",
       "      <td>IL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sometimes</td>\n",
       "      <td>100-500</td>\n",
       "      <td>...</td>\n",
       "      <td>Very difficult</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2014-08-27 11:32:43</td>\n",
       "      <td>23</td>\n",
       "      <td>Male</td>\n",
       "      <td>Canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Never</td>\n",
       "      <td>26-100</td>\n",
       "      <td>...</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Timestamp  Age  Gender         Country state self_employed  \\\n",
       "0  2014-08-27 11:29:31   37  Female   United States    IL           NaN   \n",
       "1  2014-08-27 11:29:37   44       M   United States    IN           NaN   \n",
       "2  2014-08-27 11:29:44   32    Male          Canada   NaN           NaN   \n",
       "3  2014-08-27 11:29:46   31    Male  United Kingdom   NaN           NaN   \n",
       "4  2014-08-27 11:30:22   31    Male   United States    TX           NaN   \n",
       "5  2014-08-27 11:31:22   33    Male   United States    TN           NaN   \n",
       "6  2014-08-27 11:31:50   35  Female   United States    MI           NaN   \n",
       "7  2014-08-27 11:32:05   39       M          Canada   NaN           NaN   \n",
       "8  2014-08-27 11:32:39   42  Female   United States    IL           NaN   \n",
       "9  2014-08-27 11:32:43   23    Male          Canada   NaN           NaN   \n",
       "\n",
       "  family_history treatment work_interfere    no_employees  ...  \\\n",
       "0             No       Yes          Often            6-25  ...   \n",
       "1             No        No         Rarely  More than 1000  ...   \n",
       "2             No        No         Rarely            6-25  ...   \n",
       "3            Yes       Yes          Often          26-100  ...   \n",
       "4             No        No          Never         100-500  ...   \n",
       "5            Yes        No      Sometimes            6-25  ...   \n",
       "6            Yes       Yes      Sometimes             1-5  ...   \n",
       "7             No        No          Never             1-5  ...   \n",
       "8            Yes       Yes      Sometimes         100-500  ...   \n",
       "9             No        No          Never          26-100  ...   \n",
       "\n",
       "                leave mental_health_consequence phys_health_consequence  \\\n",
       "0       Somewhat easy                        No                      No   \n",
       "1          Don't know                     Maybe                      No   \n",
       "2  Somewhat difficult                        No                      No   \n",
       "3  Somewhat difficult                       Yes                     Yes   \n",
       "4          Don't know                        No                      No   \n",
       "5          Don't know                        No                      No   \n",
       "6  Somewhat difficult                     Maybe                   Maybe   \n",
       "7          Don't know                        No                      No   \n",
       "8      Very difficult                     Maybe                      No   \n",
       "9          Don't know                        No                      No   \n",
       "\n",
       "      coworkers supervisor mental_health_interview phys_health_interview  \\\n",
       "0  Some of them        Yes                      No                 Maybe   \n",
       "1            No         No                      No                    No   \n",
       "2           Yes        Yes                     Yes                   Yes   \n",
       "3  Some of them         No                   Maybe                 Maybe   \n",
       "4  Some of them        Yes                     Yes                   Yes   \n",
       "5           Yes        Yes                      No                 Maybe   \n",
       "6  Some of them         No                      No                    No   \n",
       "7            No         No                      No                    No   \n",
       "8           Yes        Yes                      No                 Maybe   \n",
       "9           Yes        Yes                   Maybe                 Maybe   \n",
       "\n",
       "  mental_vs_physical obs_consequence comments  \n",
       "0                Yes              No      NaN  \n",
       "1         Don't know              No      NaN  \n",
       "2                 No              No      NaN  \n",
       "3                 No             Yes      NaN  \n",
       "4         Don't know              No      NaN  \n",
       "5         Don't know              No      NaN  \n",
       "6         Don't know              No      NaN  \n",
       "7                 No              No      NaN  \n",
       "8                 No              No      NaN  \n",
       "9                Yes              No      NaN  \n",
       "\n",
       "[10 rows x 27 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"survey.csv\")\n",
    "print(\"Shape (rows,cols):\" ,df.shape)\n",
    "print(\"\\nColumn names (first 20):\\n\", list(df.columns[:20]))\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "400282ec-c41b-4b5e-966d-a7f1cb3ccf67",
   "metadata": {},
   "source": [
    "#### I loaded the raw CSV into a DataFrame called df, confirmed the number of rows/columns, printed the first 20 column names, and previewed the first 10 rows to understand the structure of the dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7630edd2-9bc6-430e-a75e-82df72433732",
   "metadata": {},
   "source": [
    "# Standardize column names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1238cdab-e7df-4847-9c16-42263ca83306",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>original</th>\n",
       "      <th>cleaned</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Timestamp</td>\n",
       "      <td>timestamp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Age</td>\n",
       "      <td>age</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Gender</td>\n",
       "      <td>gender</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Country</td>\n",
       "      <td>country</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>state</td>\n",
       "      <td>state</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>self_employed</td>\n",
       "      <td>self_employed</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>family_history</td>\n",
       "      <td>family_history</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>treatment</td>\n",
       "      <td>treatment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>work_interfere</td>\n",
       "      <td>work_interfere</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>no_employees</td>\n",
       "      <td>no_employees</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>remote_work</td>\n",
       "      <td>remote_work</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>tech_company</td>\n",
       "      <td>tech_company</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>benefits</td>\n",
       "      <td>benefits</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>care_options</td>\n",
       "      <td>care_options</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>wellness_program</td>\n",
       "      <td>wellness_program</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>seek_help</td>\n",
       "      <td>seek_help</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>anonymity</td>\n",
       "      <td>anonymity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>leave</td>\n",
       "      <td>leave</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>mental_health_consequence</td>\n",
       "      <td>mental_health_consequence</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>phys_health_consequence</td>\n",
       "      <td>phys_health_consequence</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>coworkers</td>\n",
       "      <td>coworkers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>supervisor</td>\n",
       "      <td>supervisor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>mental_health_interview</td>\n",
       "      <td>mental_health_interview</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>phys_health_interview</td>\n",
       "      <td>phys_health_interview</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>mental_vs_physical</td>\n",
       "      <td>mental_vs_physical</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     original                    cleaned\n",
       "0                   Timestamp                  timestamp\n",
       "1                         Age                        age\n",
       "2                      Gender                     gender\n",
       "3                     Country                    country\n",
       "4                       state                      state\n",
       "5               self_employed              self_employed\n",
       "6              family_history             family_history\n",
       "7                   treatment                  treatment\n",
       "8              work_interfere             work_interfere\n",
       "9                no_employees               no_employees\n",
       "10                remote_work                remote_work\n",
       "11               tech_company               tech_company\n",
       "12                   benefits                   benefits\n",
       "13               care_options               care_options\n",
       "14           wellness_program           wellness_program\n",
       "15                  seek_help                  seek_help\n",
       "16                  anonymity                  anonymity\n",
       "17                      leave                      leave\n",
       "18  mental_health_consequence  mental_health_consequence\n",
       "19    phys_health_consequence    phys_health_consequence\n",
       "20                  coworkers                  coworkers\n",
       "21                 supervisor                 supervisor\n",
       "22    mental_health_interview    mental_health_interview\n",
       "23      phys_health_interview      phys_health_interview\n",
       "24         mental_vs_physical         mental_vs_physical"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "original_columns=df.columns.tolist()\n",
    "def clean_colname(c):\n",
    "    c=str(c).strip().lower()\n",
    "    c=c.replace(\"/\", \" \").replace(\"\\\\n\", \" \").replace(\"-\", \" \")\n",
    "    c=\" \".join(c.split())\n",
    "    c=c.replace(\"%\", \"pct\")\n",
    "    c = \"\".join(ch if ch.isalnum() or ch==\" \" else \"_\" for ch in c)\n",
    "    c = \"_\".join(c.split())\n",
    "    while \"__\" in c:                      \n",
    "        c = c.replace(\"__\", \"_\")\n",
    "    return c\n",
    "df.columns = [clean_colname(c) for c in df.columns]\n",
    "\n",
    "comparison = pd.DataFrame({\n",
    "    \"original\": original_columns[:25],\n",
    "    \"cleaned\": df.columns[:25]\n",
    "})\n",
    "comparison"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab16c9c2-49df-41de-892b-6f3ecb27fa34",
   "metadata": {},
   "source": [
    "#### I made column names consistent (lowercase, underscores, no special characters). This makes later code cleaner and less error-prone."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bb8544a-2467-4f30-b00d-83e4e0ce3117",
   "metadata": {},
   "source": [
    "# Remove exact duplicate rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cb6c8159-4b1d-45d0-a501-f9e8cd3d5655",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dropped 0 duplicate rows (if any). New row count: 1259\n"
     ]
    }
   ],
   "source": [
    "before=df.shape[0]\n",
    "df=df.drop_duplicates()\n",
    "after=df.shape[0]\n",
    "print(f\"Dropped {before - after} duplicate rows (if any). New row count: {after}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce2f0963-e899-42d6-8ee1-07a3b62c857f",
   "metadata": {},
   "source": [
    "#### I removed any exact duplicate rows so analyses are not biased by repeated entries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e00e81dc-2199-4207-b374-063fec50da1c",
   "metadata": {},
   "source": [
    "# Missingness overview"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f8018b7f-d774-4396-95d3-64f6f75236bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>missing_count</th>\n",
       "      <th>missing_pct</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>comments</th>\n",
       "      <td>1095</td>\n",
       "      <td>86.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <td>515</td>\n",
       "      <td>40.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>work_interfere</th>\n",
       "      <td>264</td>\n",
       "      <td>20.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>self_employed</th>\n",
       "      <td>18</td>\n",
       "      <td>1.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>seek_help</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>obs_consequence</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mental_vs_physical</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>phys_health_interview</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mental_health_interview</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>supervisor</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>coworkers</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>phys_health_consequence</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mental_health_consequence</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>leave</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>anonymity</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>wellness_program</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>benefits</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tech_company</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           missing_count  missing_pct\n",
       "comments                            1095        86.97\n",
       "state                                515        40.91\n",
       "work_interfere                       264        20.97\n",
       "self_employed                         18         1.43\n",
       "seek_help                              0         0.00\n",
       "obs_consequence                        0         0.00\n",
       "mental_vs_physical                     0         0.00\n",
       "phys_health_interview                  0         0.00\n",
       "mental_health_interview                0         0.00\n",
       "supervisor                             0         0.00\n",
       "coworkers                              0         0.00\n",
       "phys_health_consequence                0         0.00\n",
       "mental_health_consequence              0         0.00\n",
       "leave                                  0         0.00\n",
       "anonymity                              0         0.00\n",
       "timestamp                              0         0.00\n",
       "wellness_program                       0         0.00\n",
       "age                                    0         0.00\n",
       "benefits                               0         0.00\n",
       "tech_company                           0         0.00"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "na_counts=df.isna().sum().sort_values(ascending=False)\n",
    "na_pct = (na_counts / len(df) * 100).round(2)\n",
    "missing_table = pd.DataFrame({\"missing_count\": na_counts, \"missing_pct\": na_pct})\n",
    "missing_table.head(20) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60855898-06f7-4691-9cef-8a2545dfc153",
   "metadata": {},
   "source": [
    "#### I computed how many missing values each column has and what percentage of the dataset that represents. This guides which fields need cleaning or can be safely dropped later."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3219dec8-9e1c-471d-939b-1e82825bbe3f",
   "metadata": {},
   "source": [
    "# Quick type audit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "33dbd1d6-6861-46a0-b263-584868de6ddb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dtype</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>self_employed</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>family_history</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>treatment</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>work_interfere</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>no_employees</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>remote_work</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tech_company</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>benefits</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>care_options</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>wellness_program</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>seek_help</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>anonymity</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>leave</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mental_health_consequence</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>phys_health_consequence</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>coworkers</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>supervisor</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mental_health_interview</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>phys_health_interview</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mental_vs_physical</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>obs_consequence</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>comments</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            dtype\n",
       "timestamp                  object\n",
       "age                         int64\n",
       "gender                     object\n",
       "country                    object\n",
       "state                      object\n",
       "self_employed              object\n",
       "family_history             object\n",
       "treatment                  object\n",
       "work_interfere             object\n",
       "no_employees               object\n",
       "remote_work                object\n",
       "tech_company               object\n",
       "benefits                   object\n",
       "care_options               object\n",
       "wellness_program           object\n",
       "seek_help                  object\n",
       "anonymity                  object\n",
       "leave                      object\n",
       "mental_health_consequence  object\n",
       "phys_health_consequence    object\n",
       "coworkers                  object\n",
       "supervisor                 object\n",
       "mental_health_interview    object\n",
       "phys_health_interview      object\n",
       "mental_vs_physical         object\n",
       "obs_consequence            object\n",
       "comments                   object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes.to_frame(name=\"dtype\").head(30)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b891253-0970-41cf-bc6f-90cd71bb24a5",
   "metadata": {},
   "source": [
    "#### I reviewed current data types (numeric, text, datetime) to see what needs converting. This is important because many survey fields are read as text initially."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2ea48f6-5b54-4dfd-b39f-827177b88432",
   "metadata": {},
   "source": [
    "# Convert likely date columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0f68ccfc-f1e5-4a14-8843-2d3d94364d85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Detected date-like columns: ['timestamp']\n",
      "The history saving thread hit an unexpected error (OperationalError('attempt to write a readonly database')).History will not be written to the database.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014-08-27 11:29:31+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014-08-27 11:29:37+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014-08-27 11:29:44+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014-08-27 11:29:46+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014-08-27 11:30:22+00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  timestamp\n",
       "0 2014-08-27 11:29:31+00:00\n",
       "1 2014-08-27 11:29:37+00:00\n",
       "2 2014-08-27 11:29:44+00:00\n",
       "3 2014-08-27 11:29:46+00:00\n",
       "4 2014-08-27 11:30:22+00:00"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "date_like = [c for c in df.columns if any(x in c for x in [\"date\", \"time\", \"timestamp\"])]\n",
    "print(\"Detected date-like columns:\", date_like)\n",
    "\n",
    "for c in date_like:\n",
    "    try:\n",
    "        df[c] = pd.to_datetime(df[c], errors=\"coerce\", utc=True)\n",
    "    except Exception as e:\n",
    "        print(f\"Could not convert {c} to datetime: {e}\")\n",
    "\n",
    "df[date_like].head(5) if date_like else print(\"No date-like columns found.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e063d0ca-6d59-4cc8-a09d-a92fc2de5361",
   "metadata": {},
   "source": [
    "#### I searched for columns whose names suggest dates or timestamps and converted them to datetime where possible. Invalid entries become NaT so they don’t break time-based analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bd6a4b8-6d01-40e4-83b0-fc784f5feb00",
   "metadata": {},
   "source": [
    "# Convert numeric-looking text to numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4cf70b21-b4cc-49bf-b042-6cfe9b0757d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Converted to numeric: []\n",
      "No obvious numeric-looking text columns found.\n"
     ]
    }
   ],
   "source": [
    "def to_number(s):\n",
    "    if pd.isna(s): \n",
    "        return np.nan\n",
    "    s = str(s).strip()\n",
    "    \n",
    "    s = s.replace(\",\", \"\").replace(\"$\", \"\").replace(\"£\", \"\").replace(\"€\", \"\")\n",
    "    if s.endswith(\"%\"):\n",
    "        try:\n",
    "            return float(s[:-1]) / 100.0\n",
    "        except:\n",
    "            return np.nan\n",
    "    try:\n",
    "        return float(s)\n",
    "    except:\n",
    "        return np.nan\n",
    "\n",
    "obj_cols = df.select_dtypes(include=\"object\").columns.tolist()\n",
    "converted = []\n",
    "for c in obj_cols:\n",
    "    \n",
    "    sample = df[c].dropna().astype(str).head(50)\n",
    "    looks_numeric = sample.str.match(r\"^\\\\s*[\\\\$£€]?[\\\\d,]+(\\\\.\\\\d+)?%?\\\\s*$\").mean() > 0.6\n",
    "    if looks_numeric:\n",
    "        df[c] = df[c].apply(to_number)\n",
    "        converted.append(c)\n",
    "\n",
    "print(\"Converted to numeric:\", converted)\n",
    "df[converted].head(5) if converted else print(\"No obvious numeric-looking text columns found.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9f4da89-0a27-491a-82f8-dc4d735b22f4",
   "metadata": {},
   "source": [
    "#### I detected text columns that really contain numbers (e.g., values with commas, $, or %) and converted them to numeric types. This prevents math/aggregation errors later."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ede54454-fa34-4ce3-95ca-94725455874c",
   "metadata": {},
   "source": [
    "# Normalize common Yes/No fields"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b8cd21ff-ed8d-4b9d-93a7-f588b06a3ed8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Normalized Yes/No columns: ['self_employed', 'family_history', 'treatment', 'remote_work', 'tech_company', 'obs_consequence']\n"
     ]
    }
   ],
   "source": [
    "yn_map = {\n",
    "    \"yes\":\"Yes\",\"y\":\"Yes\",\"true\":\"Yes\",\"1\":\"Yes\",\n",
    "    \"no\":\"No\",\"n\":\"No\",\"false\":\"No\",\"0\":\"No\"\n",
    "}\n",
    "\n",
    "def normalize_yes_no(val):\n",
    "    if pd.isna(val): \n",
    "        return np.nan\n",
    "    s = str(val).strip().lower()\n",
    "    return yn_map.get(s, val)  \n",
    "\n",
    "\n",
    "candidate_cols = []\n",
    "for c in df.columns:\n",
    "    if df[c].dtype == \"O\":\n",
    "        vals = df[c].dropna().astype(str).str.lower().unique()\n",
    "        if len(vals) <= 6 and set(vals).issubset(set(list(yn_map.keys()) + [\"nan\", \"\"] )):\n",
    "            candidate_cols.append(c)\n",
    "\n",
    "for c in candidate_cols:\n",
    "    df[c] = df[c].map(normalize_yes_no)\n",
    "\n",
    "print(\"Normalized Yes/No columns:\", candidate_cols)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98dd0a3e-2b0c-437e-b40e-ede37ae80dfc",
   "metadata": {},
   "source": [
    "#### I standardized Yes/No fields so all variations (e.g., “Y”, “TRUE”) become either Yes or No. This keeps categories consistent across the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f593a145-df0f-49f5-9943-7b857a868b16",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Detected gender-like columns: ['gender']\n",
      "Gender value counts after normalization:\n",
      "\\n gender\n",
      "gender\n",
      "Male                985\n",
      "Female              249\n",
      "Non-binary/Other     25\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "gender_cols = [c for c in df.columns if c in [\"gender\", \"sex\"]]\n",
    "print(\"Detected gender-like columns:\", gender_cols)\n",
    "\n",
    "def normalize_gender(val):\n",
    "    if pd.isna(val): \n",
    "        return np.nan\n",
    "    s = str(val).strip().lower()\n",
    "    \n",
    "    male_terms = [\"m\",\"male\",\"man\",\"cis male\",\"cis-man\",\"cisgender male\",\"male-ish\",\"mal\"]\n",
    "    female_terms = [\"f\",\"female\",\"woman\",\"cis female\",\"cis-woman\",\"cisgender female\",\"femail\"]\n",
    "    nb_terms = [\"non-binary\",\"nonbinary\",\"nb\",\"genderqueer\",\"trans\",\"agender\",\"fluid\",\"enby\"]\n",
    "    \n",
    "    if any(t == s for t in male_terms) or \"male\" in s and \"fe\" not in s:\n",
    "        return \"Male\"\n",
    "    if any(t == s for t in female_terms) or \"female\" in s:\n",
    "        return \"Female\"\n",
    "    if any(t in s for t in nb_terms):\n",
    "        return \"Non-binary/Other\"\n",
    "    if s in [\"prefer not to say\",\"na\",\"n/a\",\"none\"]:\n",
    "        return \"Prefer not to say\"\n",
    "    # fallback\n",
    "    return \"Non-binary/Other\"\n",
    "\n",
    "for c in gender_cols:\n",
    "    df[c] = df[c].map(normalize_gender)\n",
    "\n",
    "if gender_cols:\n",
    "    print(\"Gender value counts after normalization:\")\n",
    "    for c in gender_cols:\n",
    "        print(\"\\\\n\", c)\n",
    "        print(df[c].value_counts(dropna=False))\n",
    "else:\n",
    "    print(\"No gender-like columns found.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4af24a53-ba0a-4f81-bd1d-d17aca57c933",
   "metadata": {},
   "source": [
    "#### If a gender (or sex) column exists, I normalized common free‑text entries into four categories: Male, Female, Non-binary/Other, and Prefer not to say. This reduces noisy labels while respecting inclusion."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4920d2c7-7c73-4550-802c-2ab6deb72b61",
   "metadata": {},
   "source": [
    "# Age sanity check (if present)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "81e2b5c1-9ebf-4f70-8a24-5077f8a35c3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ages outside 18–100 set to NaN. 8 values changed.\n"
     ]
    }
   ],
   "source": [
    "if \"age\" in df.columns:\n",
    "    # Replace ages outside a reasonable range with NaN\n",
    "    before_na = df[\"age\"].isna().sum()\n",
    "    df.loc[(df[\"age\"] < 18) | (df[\"age\"] > 100), \"age\"] = np.nan\n",
    "    after_na = df[\"age\"].isna().sum()\n",
    "    print(f\"Ages outside 18–100 set to NaN. {after_na - before_na} values changed.\")\n",
    "    df[\"age\"].describe()\n",
    "else:\n",
    "    print(\"No 'age' column found.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aaff745c-d307-4937-a367-1267406a1bdd",
   "metadata": {},
   "source": [
    "#### If an age column exists, I set impossible ages (below 18 or above 100) to missing. This keeps summary stats meaningful."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5364d0f7-ff4d-4362-a77c-ac402d0fafc3",
   "metadata": {},
   "source": [
    "# Strip whitespace and unify obvious missing tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5288e0ac-5606-466c-bde8-81e72da48e7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished trimming strings and unifying missing tokens.\n"
     ]
    }
   ],
   "source": [
    "missing_tokens = {\"\", \"na\", \"n/a\", \"none\", \"null\", \"nan\"}\n",
    "for c in df.select_dtypes(include=\"object\").columns:\n",
    "    df[c] = df[c].astype(str).str.strip()\n",
    "    df[c] = df[c].replace({t: np.nan for t in missing_tokens})\n",
    "\n",
    "print(\"Finished trimming strings and unifying missing tokens.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6128a921-4c79-4291-be40-6591ee91e9bc",
   "metadata": {},
   "source": [
    "#### I removed extra spaces from text fields and turned common placeholders like “NA” or “None” into real missing values (NaN) so missingness is counted correctly."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6123b455-0366-44ec-bd1b-73a1890f62f3",
   "metadata": {},
   "source": [
    "# Data dictionary (post-clean) & save cleaned CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d7ecc83f-971d-4f48-88f1-aa3f106f5102",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved: /Users/mariaalejandrasuarez/Documents/Capstone 3/survey_clean.csv\n",
      "Saved: /Users/mariaalejandrasuarez/Documents/Capstone 3/data_dictionary.csv\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column</th>\n",
       "      <th>dtype</th>\n",
       "      <th>n_unique</th>\n",
       "      <th>n_missing</th>\n",
       "      <th>example_values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>age</td>\n",
       "      <td>float64</td>\n",
       "      <td>45</td>\n",
       "      <td>8</td>\n",
       "      <td>37.0, 44.0, 32.0, 31.0, 33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>anonymity</td>\n",
       "      <td>object</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes, Don't know, No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>benefits</td>\n",
       "      <td>object</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes, Don't know, No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>care_options</td>\n",
       "      <td>object</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Not sure, No, Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>comments</td>\n",
       "      <td>object</td>\n",
       "      <td>159</td>\n",
       "      <td>1096</td>\n",
       "      <td>I'm not on my company's health insurance which...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>country</td>\n",
       "      <td>object</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>United States, Canada, United Kingdom, Bulgari...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>coworkers</td>\n",
       "      <td>object</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Some of them, No, Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>family_history</td>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>No, Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>gender</td>\n",
       "      <td>object</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Female, Male, Non-binary/Other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>leave</td>\n",
       "      <td>object</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>Somewhat easy, Don't know, Somewhat difficult,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>mental_health_consequence</td>\n",
       "      <td>object</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>No, Maybe, Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>mental_health_interview</td>\n",
       "      <td>object</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>No, Yes, Maybe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>mental_vs_physical</td>\n",
       "      <td>object</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes, Don't know, No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>no_employees</td>\n",
       "      <td>object</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6-25, More than 1000, 26-100, 100-500, 1-5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>obs_consequence</td>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>No, Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       column    dtype  n_unique  n_missing  \\\n",
       "0                         age  float64        45          8   \n",
       "1                   anonymity   object         3          0   \n",
       "2                    benefits   object         3          0   \n",
       "3                care_options   object         3          0   \n",
       "4                    comments   object       159       1096   \n",
       "5                     country   object        48          0   \n",
       "6                   coworkers   object         3          0   \n",
       "7              family_history   object         2          0   \n",
       "8                      gender   object         3          0   \n",
       "9                       leave   object         5          0   \n",
       "10  mental_health_consequence   object         3          0   \n",
       "11    mental_health_interview   object         3          0   \n",
       "12         mental_vs_physical   object         3          0   \n",
       "13               no_employees   object         6          0   \n",
       "14            obs_consequence   object         2          0   \n",
       "\n",
       "                                       example_values  \n",
       "0                        37.0, 44.0, 32.0, 31.0, 33.0  \n",
       "1                                 Yes, Don't know, No  \n",
       "2                                 Yes, Don't know, No  \n",
       "3                                   Not sure, No, Yes  \n",
       "4   I'm not on my company's health insurance which...  \n",
       "5   United States, Canada, United Kingdom, Bulgari...  \n",
       "6                               Some of them, No, Yes  \n",
       "7                                             No, Yes  \n",
       "8                      Female, Male, Non-binary/Other  \n",
       "9   Somewhat easy, Don't know, Somewhat difficult,...  \n",
       "10                                     No, Maybe, Yes  \n",
       "11                                     No, Yes, Maybe  \n",
       "12                                Yes, Don't know, No  \n",
       "13         6-25, More than 1000, 26-100, 100-500, 1-5  \n",
       "14                                            No, Yes  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preview_vals = {}\n",
    "for c in df.columns:\n",
    "    sample = df[c].dropna().unique()[:5]\n",
    "    preview_vals[c] = \", \".join(map(str, sample))\n",
    "\n",
    "data_dict = pd.DataFrame({\n",
    "    \"column\": df.columns,\n",
    "    \"dtype\": [str(df[c].dtype) for c in df.columns],\n",
    "    \"n_unique\": [df[c].nunique(dropna=True) for c in df.columns],\n",
    "    \"n_missing\": [df[c].isna().sum() for c in df.columns],\n",
    "    \"example_values\": [preview_vals[c] for c in df.columns],\n",
    "}).sort_values(\"column\").reset_index(drop=True)\n",
    "\n",
    "# Save outputs\n",
    "clean_path = Path(\"survey_clean.csv\")\n",
    "dict_path = Path(\"data_dictionary.csv\")\n",
    "df.to_csv(clean_path, index=False)\n",
    "data_dict.to_csv(dict_path, index=False)\n",
    "\n",
    "print(\"Saved:\", clean_path.resolve())\n",
    "print(\"Saved:\", dict_path.resolve())\n",
    "\n",
    "data_dict.head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "12b19deb-037f-4401-960f-4b2d4616c87f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Preview of cleaned dataset:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>country</th>\n",
       "      <th>state</th>\n",
       "      <th>self_employed</th>\n",
       "      <th>family_history</th>\n",
       "      <th>treatment</th>\n",
       "      <th>work_interfere</th>\n",
       "      <th>no_employees</th>\n",
       "      <th>...</th>\n",
       "      <th>leave</th>\n",
       "      <th>mental_health_consequence</th>\n",
       "      <th>phys_health_consequence</th>\n",
       "      <th>coworkers</th>\n",
       "      <th>supervisor</th>\n",
       "      <th>mental_health_interview</th>\n",
       "      <th>phys_health_interview</th>\n",
       "      <th>mental_vs_physical</th>\n",
       "      <th>obs_consequence</th>\n",
       "      <th>comments</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014-08-27 11:29:31+00:00</td>\n",
       "      <td>37.0</td>\n",
       "      <td>Female</td>\n",
       "      <td>United States</td>\n",
       "      <td>IL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Often</td>\n",
       "      <td>6-25</td>\n",
       "      <td>...</td>\n",
       "      <td>Somewhat easy</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Some of them</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014-08-27 11:29:37+00:00</td>\n",
       "      <td>44.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>United States</td>\n",
       "      <td>IN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Rarely</td>\n",
       "      <td>More than 1000</td>\n",
       "      <td>...</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014-08-27 11:29:44+00:00</td>\n",
       "      <td>32.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>Canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Rarely</td>\n",
       "      <td>6-25</td>\n",
       "      <td>...</td>\n",
       "      <td>Somewhat difficult</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014-08-27 11:29:46+00:00</td>\n",
       "      <td>31.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Often</td>\n",
       "      <td>26-100</td>\n",
       "      <td>...</td>\n",
       "      <td>Somewhat difficult</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Some of them</td>\n",
       "      <td>No</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014-08-27 11:30:22+00:00</td>\n",
       "      <td>31.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>United States</td>\n",
       "      <td>TX</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Never</td>\n",
       "      <td>100-500</td>\n",
       "      <td>...</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Some of them</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2014-08-27 11:31:22+00:00</td>\n",
       "      <td>33.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>United States</td>\n",
       "      <td>TN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Sometimes</td>\n",
       "      <td>6-25</td>\n",
       "      <td>...</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2014-08-27 11:31:50+00:00</td>\n",
       "      <td>35.0</td>\n",
       "      <td>Female</td>\n",
       "      <td>United States</td>\n",
       "      <td>MI</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sometimes</td>\n",
       "      <td>1-5</td>\n",
       "      <td>...</td>\n",
       "      <td>Somewhat difficult</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Some of them</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2014-08-27 11:32:05+00:00</td>\n",
       "      <td>39.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>Canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Never</td>\n",
       "      <td>1-5</td>\n",
       "      <td>...</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2014-08-27 11:32:39+00:00</td>\n",
       "      <td>42.0</td>\n",
       "      <td>Female</td>\n",
       "      <td>United States</td>\n",
       "      <td>IL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sometimes</td>\n",
       "      <td>100-500</td>\n",
       "      <td>...</td>\n",
       "      <td>Very difficult</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2014-08-27 11:32:43+00:00</td>\n",
       "      <td>23.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>Canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Never</td>\n",
       "      <td>26-100</td>\n",
       "      <td>...</td>\n",
       "      <td>Don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Maybe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  timestamp   age  gender         country state self_employed  \\\n",
       "0 2014-08-27 11:29:31+00:00  37.0  Female   United States    IL           NaN   \n",
       "1 2014-08-27 11:29:37+00:00  44.0    Male   United States    IN           NaN   \n",
       "2 2014-08-27 11:29:44+00:00  32.0    Male          Canada   NaN           NaN   \n",
       "3 2014-08-27 11:29:46+00:00  31.0    Male  United Kingdom   NaN           NaN   \n",
       "4 2014-08-27 11:30:22+00:00  31.0    Male   United States    TX           NaN   \n",
       "5 2014-08-27 11:31:22+00:00  33.0    Male   United States    TN           NaN   \n",
       "6 2014-08-27 11:31:50+00:00  35.0  Female   United States    MI           NaN   \n",
       "7 2014-08-27 11:32:05+00:00  39.0    Male          Canada   NaN           NaN   \n",
       "8 2014-08-27 11:32:39+00:00  42.0  Female   United States    IL           NaN   \n",
       "9 2014-08-27 11:32:43+00:00  23.0    Male          Canada   NaN           NaN   \n",
       "\n",
       "  family_history treatment work_interfere    no_employees  ...  \\\n",
       "0             No       Yes          Often            6-25  ...   \n",
       "1             No        No         Rarely  More than 1000  ...   \n",
       "2             No        No         Rarely            6-25  ...   \n",
       "3            Yes       Yes          Often          26-100  ...   \n",
       "4             No        No          Never         100-500  ...   \n",
       "5            Yes        No      Sometimes            6-25  ...   \n",
       "6            Yes       Yes      Sometimes             1-5  ...   \n",
       "7             No        No          Never             1-5  ...   \n",
       "8            Yes       Yes      Sometimes         100-500  ...   \n",
       "9             No        No          Never          26-100  ...   \n",
       "\n",
       "                leave mental_health_consequence phys_health_consequence  \\\n",
       "0       Somewhat easy                        No                      No   \n",
       "1          Don't know                     Maybe                      No   \n",
       "2  Somewhat difficult                        No                      No   \n",
       "3  Somewhat difficult                       Yes                     Yes   \n",
       "4          Don't know                        No                      No   \n",
       "5          Don't know                        No                      No   \n",
       "6  Somewhat difficult                     Maybe                   Maybe   \n",
       "7          Don't know                        No                      No   \n",
       "8      Very difficult                     Maybe                      No   \n",
       "9          Don't know                        No                      No   \n",
       "\n",
       "      coworkers supervisor mental_health_interview phys_health_interview  \\\n",
       "0  Some of them        Yes                      No                 Maybe   \n",
       "1            No         No                      No                    No   \n",
       "2           Yes        Yes                     Yes                   Yes   \n",
       "3  Some of them         No                   Maybe                 Maybe   \n",
       "4  Some of them        Yes                     Yes                   Yes   \n",
       "5           Yes        Yes                      No                 Maybe   \n",
       "6  Some of them         No                      No                    No   \n",
       "7            No         No                      No                    No   \n",
       "8           Yes        Yes                      No                 Maybe   \n",
       "9           Yes        Yes                   Maybe                 Maybe   \n",
       "\n",
       "  mental_vs_physical obs_consequence comments  \n",
       "0                Yes              No      NaN  \n",
       "1         Don't know              No      NaN  \n",
       "2                 No              No      NaN  \n",
       "3                 No             Yes      NaN  \n",
       "4         Don't know              No      NaN  \n",
       "5         Don't know              No      NaN  \n",
       "6         Don't know              No      NaN  \n",
       "7                 No              No      NaN  \n",
       "8                 No              No      NaN  \n",
       "9                Yes              No      NaN  \n",
       "\n",
       "[10 rows x 27 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Dataset shape: (1259, 27)\n",
      "\n",
      "Remaining missing values by column:\n",
      "age                  8\n",
      "state              515\n",
      "self_employed       18\n",
      "work_interfere     264\n",
      "comments          1096\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"Preview of cleaned dataset:\")\n",
    "display(df.head(10))\n",
    "\n",
    "# Show shape (rows, columns)\n",
    "print(\"\\nDataset shape:\", df.shape)\n",
    "\n",
    "# Check if any missing values remain\n",
    "print(\"\\nRemaining missing values by column:\")\n",
    "print(df.isna().sum()[df.isna().sum() > 0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4429a295-92aa-4a95-8d36-ff61b25e78d4",
   "metadata": {},
   "source": [
    "# Missing Values Treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f53b7f18-17bc-4dc5-b332-6fc69c39a02a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dropping columns due to high missingness: ['state', 'comments']\n",
      "Filled NaN in numeric column 'age' with median=31.0\n",
      "Filled NaN in categorical column 'self_employed' with 'No'\n",
      "Filled NaN in categorical column 'work_interfere' with 'Sometimes'\n",
      "\n",
      "Remaining missing values: 0\n"
     ]
    }
   ],
   "source": [
    "## Step 13 — Missing Values Treatment\n",
    "\n",
    "# 1. Drop columns with too many missing values\n",
    "# Let's say > 40% missing is too much for this project\n",
    "threshold = 0.4\n",
    "cols_to_drop = [c for c in df.columns if df[c].isna().mean() > threshold]\n",
    "\n",
    "print(\"Dropping columns due to high missingness:\", cols_to_drop)\n",
    "df = df.drop(columns=cols_to_drop)\n",
    "\n",
    "# 2. Impute numeric columns (median)\n",
    "num_cols = df.select_dtypes(include=[\"float64\", \"int64\"]).columns\n",
    "for c in num_cols:\n",
    "    median_val = df[c].median()\n",
    "    df[c] = df[c].fillna(median_val)\n",
    "    print(f\"Filled NaN in numeric column '{c}' with median={median_val}\")\n",
    "\n",
    "# 3. Impute categorical columns (mode or 'Unknown')\n",
    "cat_cols = df.select_dtypes(include=\"object\").columns\n",
    "for c in cat_cols:\n",
    "    if df[c].isna().sum() > 0:\n",
    "        mode_val = df[c].mode(dropna=True)\n",
    "        if not mode_val.empty:\n",
    "            fill_val = mode_val[0]   # most frequent value\n",
    "        else:\n",
    "            fill_val = \"Unknown\"\n",
    "        df[c] = df[c].fillna(fill_val)\n",
    "        print(f\"Filled NaN in categorical column '{c}' with '{fill_val}'\")\n",
    "\n",
    "# Quick check — confirm no missing left\n",
    "print(\"\\nRemaining missing values:\", df.isna().sum().sum())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78e62ed9-e3e6-40bf-8b42-a2ad9fdacc14",
   "metadata": {},
   "source": [
    "print(\"Preview of cleaned dataset:\")\n",
    "display(df.head(10))\n",
    "\n",
    "# Show shape (rows, columns)\n",
    "print(\"\\nDataset shape:\", df.shape)\n",
    "\n",
    "# Check if any missing values remain\n",
    "print(\"\\nRemaining missing values by column:\")\n",
    "print(df.isna().sum()[df.isna().sum() > 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86271290-2996-4603-af6f-8b0a00223810",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
